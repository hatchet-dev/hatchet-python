# coding: utf-8

"""
    Hatchet API

    The Hatchet API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from hatchet_sdk.clients.cloud_rest.models.tenant_billing_state_get200_response_coupons_inner import (
    TenantBillingStateGet200ResponseCouponsInner,
)
from hatchet_sdk.clients.cloud_rest.models.tenant_billing_state_get200_response_payment_methods_inner import (
    TenantBillingStateGet200ResponsePaymentMethodsInner,
)
from hatchet_sdk.clients.cloud_rest.models.tenant_billing_state_get200_response_plans_inner import (
    TenantBillingStateGet200ResponsePlansInner,
)
from hatchet_sdk.clients.cloud_rest.models.tenant_billing_state_get200_response_subscription import (
    TenantBillingStateGet200ResponseSubscription,
)


class TenantBillingStateGet200Response(BaseModel):
    """
    TenantBillingStateGet200Response
    """  # noqa: E501

    payment_methods: Optional[
        List[TenantBillingStateGet200ResponsePaymentMethodsInner]
    ] = Field(default=None, alias="paymentMethods")
    subscription: TenantBillingStateGet200ResponseSubscription
    plans: Optional[List[TenantBillingStateGet200ResponsePlansInner]] = Field(
        default=None, description="A list of plans available for the tenant."
    )
    coupons: Optional[List[TenantBillingStateGet200ResponseCouponsInner]] = Field(
        default=None, description="A list of coupons applied to the tenant."
    )
    __properties: ClassVar[List[str]] = [
        "paymentMethods",
        "subscription",
        "plans",
        "coupons",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TenantBillingStateGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payment_methods (list)
        _items = []
        if self.payment_methods:
            for _item in self.payment_methods:
                if _item:
                    _items.append(_item.to_dict())
            _dict["paymentMethods"] = _items
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription:
            _dict["subscription"] = self.subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in plans (list)
        _items = []
        if self.plans:
            for _item in self.plans:
                if _item:
                    _items.append(_item.to_dict())
            _dict["plans"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in coupons (list)
        _items = []
        if self.coupons:
            for _item in self.coupons:
                if _item:
                    _items.append(_item.to_dict())
            _dict["coupons"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TenantBillingStateGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "paymentMethods": (
                    [
                        TenantBillingStateGet200ResponsePaymentMethodsInner.from_dict(
                            _item
                        )
                        for _item in obj["paymentMethods"]
                    ]
                    if obj.get("paymentMethods") is not None
                    else None
                ),
                "subscription": (
                    TenantBillingStateGet200ResponseSubscription.from_dict(
                        obj["subscription"]
                    )
                    if obj.get("subscription") is not None
                    else None
                ),
                "plans": (
                    [
                        TenantBillingStateGet200ResponsePlansInner.from_dict(_item)
                        for _item in obj["plans"]
                    ]
                    if obj.get("plans") is not None
                    else None
                ),
                "coupons": (
                    [
                        TenantBillingStateGet200ResponseCouponsInner.from_dict(_item)
                        for _item in obj["coupons"]
                    ]
                    if obj.get("coupons") is not None
                    else None
                ),
            }
        )
        return _obj
