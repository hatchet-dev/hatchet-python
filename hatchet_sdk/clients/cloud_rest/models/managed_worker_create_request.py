# coding: utf-8

"""
    Hatchet API

    The Hatchet API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Self

from hatchet_sdk.clients.cloud_rest.models.managed_worker_create_request_build_config import (
    ManagedWorkerCreateRequestBuildConfig,
)
from hatchet_sdk.clients.cloud_rest.models.managed_worker_create_request_runtime_config import (
    ManagedWorkerCreateRequestRuntimeConfig,
)


class ManagedWorkerCreateRequest(BaseModel):
    """
    ManagedWorkerCreateRequest
    """  # noqa: E501

    name: StrictStr
    build_config: ManagedWorkerCreateRequestBuildConfig = Field(alias="buildConfig")
    env_vars: Dict[str, StrictStr] = Field(
        description="A map of environment variables to set for the worker",
        alias="envVars",
    )
    is_iac: StrictBool = Field(alias="isIac")
    runtime_config: Optional[ManagedWorkerCreateRequestRuntimeConfig] = Field(
        default=None, alias="runtimeConfig"
    )
    __properties: ClassVar[List[str]] = [
        "name",
        "buildConfig",
        "envVars",
        "isIac",
        "runtimeConfig",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedWorkerCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of build_config
        if self.build_config:
            _dict["buildConfig"] = self.build_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of runtime_config
        if self.runtime_config:
            _dict["runtimeConfig"] = self.runtime_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedWorkerCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "buildConfig": (
                    ManagedWorkerCreateRequestBuildConfig.from_dict(obj["buildConfig"])
                    if obj.get("buildConfig") is not None
                    else None
                ),
                "isIac": obj.get("isIac"),
                "runtimeConfig": (
                    ManagedWorkerCreateRequestRuntimeConfig.from_dict(
                        obj["runtimeConfig"]
                    )
                    if obj.get("runtimeConfig") is not None
                    else None
                ),
            }
        )
        return _obj
