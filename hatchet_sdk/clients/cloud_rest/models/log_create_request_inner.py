# coding: utf-8

"""
    Hatchet API

    The Hatchet API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictStr
from typing_extensions import Self

from hatchet_sdk.clients.cloud_rest.models.log_create_request_inner_event import (
    LogCreateRequestInnerEvent,
)
from hatchet_sdk.clients.cloud_rest.models.log_create_request_inner_fly import (
    LogCreateRequestInnerFly,
)
from hatchet_sdk.clients.cloud_rest.models.log_create_request_inner_log import (
    LogCreateRequestInnerLog,
)


class LogCreateRequestInner(BaseModel):
    """
    LogCreateRequestInner
    """  # noqa: E501

    event: Optional[LogCreateRequestInnerEvent] = None
    fly: Optional[LogCreateRequestInnerFly] = None
    host: Optional[StrictStr] = None
    log: Optional[LogCreateRequestInnerLog] = None
    message: Optional[StrictStr] = None
    timestamp: Optional[datetime] = None
    __properties: ClassVar[List[str]] = [
        "event",
        "fly",
        "host",
        "log",
        "message",
        "timestamp",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogCreateRequestInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event
        if self.event:
            _dict["event"] = self.event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fly
        if self.fly:
            _dict["fly"] = self.fly.to_dict()
        # override the default output from pydantic by calling `to_dict()` of log
        if self.log:
            _dict["log"] = self.log.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogCreateRequestInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "event": (
                    LogCreateRequestInnerEvent.from_dict(obj["event"])
                    if obj.get("event") is not None
                    else None
                ),
                "fly": (
                    LogCreateRequestInnerFly.from_dict(obj["fly"])
                    if obj.get("fly") is not None
                    else None
                ),
                "host": obj.get("host"),
                "log": (
                    LogCreateRequestInnerLog.from_dict(obj["log"])
                    if obj.get("log") is not None
                    else None
                ),
                "message": obj.get("message"),
                "timestamp": obj.get("timestamp"),
            }
        )
        return _obj
