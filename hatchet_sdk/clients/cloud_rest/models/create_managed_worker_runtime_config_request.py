# coding: utf-8

"""
    Hatchet API

    The Hatchet API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Annotated, Self

from hatchet_sdk.clients.cloud_rest.models.managed_worker_region import (
    ManagedWorkerRegion,
)


class CreateManagedWorkerRuntimeConfigRequest(BaseModel):
    """
    CreateManagedWorkerRuntimeConfigRequest
    """  # noqa: E501

    num_replicas: Annotated[int, Field(le=1000, strict=True, ge=0)] = Field(
        alias="numReplicas"
    )
    region: Optional[ManagedWorkerRegion] = Field(
        default=None, description="The region to deploy the worker to"
    )
    cpu_kind: StrictStr = Field(
        description="The kind of CPU to use for the worker", alias="cpuKind"
    )
    cpus: Annotated[int, Field(le=64, strict=True, ge=1)] = Field(
        description="The number of CPUs to use for the worker"
    )
    memory_mb: Annotated[int, Field(le=65536, strict=True, ge=1024)] = Field(
        description="The amount of memory in MB to use for the worker", alias="memoryMb"
    )
    actions: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = [
        "numReplicas",
        "region",
        "cpuKind",
        "cpus",
        "memoryMb",
        "actions",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateManagedWorkerRuntimeConfigRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateManagedWorkerRuntimeConfigRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "numReplicas": obj.get("numReplicas"),
                "region": obj.get("region"),
                "cpuKind": obj.get("cpuKind"),
                "cpus": obj.get("cpus"),
                "memoryMb": obj.get("memoryMb"),
                "actions": obj.get("actions"),
            }
        )
        return _obj
