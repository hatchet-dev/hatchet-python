# coding: utf-8

"""
    Hatchet API

    The Hatchet API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self


class SubscriptionUpsert200Response(BaseModel):
    """
    SubscriptionUpsert200Response
    """  # noqa: E501

    plan: Optional[StrictStr] = Field(
        default=None,
        description="The plan code associated with the tenant subscription.",
    )
    period: Optional[StrictStr] = Field(
        default=None, description="The period associated with the tenant subscription."
    )
    status: Optional[StrictStr] = Field(
        default=None, description="The status of the tenant subscription."
    )
    note: Optional[StrictStr] = Field(
        default=None, description="A note associated with the tenant subscription."
    )
    __properties: ClassVar[List[str]] = ["plan", "period", "status", "note"]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["active", "pending", "terminated", "canceled"]):
            raise ValueError(
                "must be one of enum values ('active', 'pending', 'terminated', 'canceled')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionUpsert200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionUpsert200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "plan": obj.get("plan"),
                "period": obj.get("period"),
                "status": obj.get("status"),
                "note": obj.get("note"),
            }
        )
        return _obj
