[tool.poetry]
name = "hatchet-sdk"
version = "0.40.0"
description = ""
authors = ["Alexander Belanger <alexander@hatchet.run>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
grpcio = "^1.64.1"
python-dotenv = "^1.0.0"
protobuf = "^4.25.2"
pyyaml = "^6.0.1"
grpcio-tools = "^1.60.0"
loguru = "^0.7.2"
pydantic = "^2.6.3"
python-dateutil = "^2.9.0.post0"
urllib3 = ">=1.26.20"
aiostream = "^0.5.2"
nest-asyncio = "^1.6.0"
aiohttp = "^3.10.5"
aiohttp-retry = "^2.8.3"
tenacity = ">=8.4.1"
opentelemetry-api = "^1.27.0"
opentelemetry-sdk = "^1.27.0"
opentelemetry-instrumentation = "^0.48b0"
opentelemetry-distro = "^0.48b0"
opentelemetry-exporter-otlp = "^1.27.0"
opentelemetry-exporter-otlp-proto-http = "^1.27.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pytest-asyncio = "^0.23.8"
psutil = "^6.0.0"

[tool.poetry.group.lint.dependencies]
mypy = "^1.13.0"
types-protobuf = "^5.28.3.20241030"
black = "^24.10.0"
isort = "^5.13.2"

[tool.poetry.group.test.dependencies]
pytest-timeout = "^2.3.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
log_cli = true

[tool.isort]
profile = "black"
known_third_party = [
  "grpcio",
  "grpcio_tools",
  "loguru",
  "protobuf",
  "pydantic",
  "python_dotenv",
  "python_dateutil",
  "pyyaml",
  "urllib3",
]
extend_skip = ["hatchet_sdk/contracts/"]

[tool.black]
extend_exclude = "hatchet_sdk/contracts/"

[tool.mypy]
strict = true
files = ["hatchet_sdk/hatchet.py"]
follow_imports = "silent"

[tool.poetry.scripts]
api = "examples.api.api:main"
async = "examples.async.worker:main"
fanout = "examples.fanout.worker:main"
cancellation = "examples.cancellation.worker:main"
concurrency_limit = "examples.concurrency_limit.worker:main"
concurrency_limit_rr = "examples.concurrency_limit_rr.worker:main"
dag = "examples.dag.worker:main"
delayed = "examples.delayed.worker:main"
events = "examples.events.worker:main"
logger = "examples.logger.worker:main"
manual_trigger = "examples.manual_trigger.worker:main"
on_failure = "examples.on_failure.worker:main"
programatic_replay = "examples.programatic_replay.worker:main"
rate_limit = "examples.rate_limit.worker:main"
simple = "examples.simple.worker:main"
timeout = "examples.timeout.worker:main"
blocked = "examples.blocked_async.worker:main"
existing_loop = "examples.worker_existing_loop.worker:main"
bulk_fanout = "examples.bulk_fanout.worker:main"
